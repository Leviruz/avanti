// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Customer {
  id         Int     @id @default(autoincrement())
  name       String
  email      String  @unique
  address    String?
  phone      String?
  createdAt  DateTime @default(now())
  orders     Order[] // Relacionamento com pedidos
}

model Seller {
  id         Int     @id @default(autoincrement())
  name       String
  email      String  @unique
  phone      String?
  createdAt  DateTime @default(now())
}

model Product {
  id          Int     @id @default(autoincrement())
  name        String
  description String?
  price       Decimal @db.Decimal(10, 2)
  stock       Int     // Quantidade disponível
  orderItems  OrderItem[]
}

model Order {
  id         Int      @id @default(autoincrement())
  customerId Int
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  total      Decimal  @db.Decimal(10, 2)
  status     String   // Ex: "Pendente", "Enviado", "Entregue"
  createdAt  DateTime @default(now())
  orderItems OrderItem[] // Relacionamento com os itens do pedido
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  orderId   Int
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity  Int
  price     Decimal @db.Decimal(10, 2) // Salvar o preço do produto no momento da compra
}